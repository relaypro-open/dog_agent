#!/bin/sh
#
# chkconfig: 2345 98 55
# description: Dog Agent
# processname: dog
# pidfile: /var/run/dog/dog.pid
APP=dog
CP=/opt/dog
TIMEOUT=10
export RELX_REPLACE_OS_VARS=true
export ERL_EPMD_PORT=4371

export HOME=/opt/dog
export SHELL=/bin/sh

. /etc/rc.d/init.d/functions

error() {
    echo -n "$1"
    echo_failure
    echo
    exit 1
}

# Note: pid file is kept in /var/run because older versions of
# redhat's implementation of "killproc" don't accept a pidfile
# argument.

PIDFILE='/var/run/dog/dog.pid'
LOGFILE='/var/log/dog/console.log'

start()
{

    status dog >/dev/null
    if [ $? = 0 ]; then
      echo -n "The Dog Agent is already running ..."
      echo_success
      echo
      exit 0
    fi

    echo -n "Starting the Dog Agent...  "
    daemonize -c $CP -a -e $LOGFILE -o $LOGFILE -p $PIDFILE -l $PIDFILE -u $APP /opt/dog/bin/dog foreground
    
    sleep 2
    if [ -f "$PIDFILE" ]; then
      [ -d '/var/lock/subsys' ] && touch /var/lock/subsys/$APP
      echo_success
      echo
    else
      echo_failure
      echo
      exit 1
    fi
}

stop()
{
    echo -n "Stopping the Dog Agent...  "
    if [[ -f "$PIDFILE" ]]; then
        kill $(cat $PIDFILE)
        timeout $TIMEOUT tail --pid=$(cat $PIDFILE) -f /dev/null
            rm -f ${PIDFILE}
        echo
    else
    echo -n "No PID file at ${PIDFILE}"
    fi
    [ -d '/var/lock/subsys' ] && rm -f /var/lock/subsys/$APP
}

cd $CP

case "$1" in
    start)
        shift 1
        start "$@"
        ;;
    stop)
        stop
        ;;
    status)
        status $APP
        exit $?
        ;;
    restart)
        stop
        start
        ;;
    *)
        echo "Usage: /etc/init.d/dog {start|stop|restart|status}"
        exit 1
esac

exit 0
